<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>View Absolute</action_name>
        <active>true</active>
        <client>false</client>
        <client_script_v2/>
        <comments>Click to view Absolute data for this specific computer.</comments>
        <condition/>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>true</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style>primary</form_style>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>View Absolute Device</name>
        <onclick/>
        <order>0</order>
        <script><![CDATA[var device = new GlideRecord('x_absr_itsm_device');
device.addQuery('serial',current.serial_number);
device.query();

var formatBytes = function(e, t) {
	if (e === 0)
		return "0 Byte";
	var n = 1024,
	r = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
	i = Math.floor(Math.log(e) / Math.log(n));
	return Number((e / Math.pow(n, i)).toFixed(t)) + " " + r[i];
};

if(device.next()) {
	// We will navigate to the existing record.
	
	action.setRedirectURL(device);
	action.setReturnURL(current);
	
}
else {
	// We will create the record first and then navigate to it.
	// Get data from API.
	var apiSecret = gs.getProperty('x_absr_itsm.API_Secret');
	var apiToken = gs.getProperty('x_absr_itsm.API_Token');
	var api = new AbsoluteAPI(apiToken, apiSecret);
	var absoluteDevice = api.fetchDeviceBySerial(current.serial_number);
	
	// Set sys_id link
	device.computer = current.sys_id;
	
	// Make sure absoluteDevice is populated before updating.
	if(absoluteDevice) {
		// Set updated values.
		device.identifier = absoluteDevice.esn;
		device.id = absoluteDevice.id;
		device.serial = current.serial_number;
		
		if(absoluteDevice.systemName){
			device.device_name = absoluteDevice.systemName;
		}
		
		if(absoluteDevice.lastConnectedUtc){
			// Set last connected date.
			var lastConnectedDate = new GlideDateTime();
			lastConnectedDate.subtract(lastConnectedDate.getNumericValue()); //Sets date to 0.
			lastConnectedDate.add(absoluteDevice.lastConnectedUtc);
			device.last_connected_utc = lastConnectedDate;
		}
		
		if(absoluteDevice.os && absoluteDevice.os.name){
			device.os_name = absoluteDevice.os.name;
		}
		
		if(absoluteDevice.username){
			device.username = absoluteDevice.username;
		}
		
		if(absoluteDevice.avgMinutesInUse) {
			device.average_daily_usage_hours_minutes = Math.floor(absoluteDevice.avgMinutesInUse / 60).toString() + ":" + (absoluteDevice.avgMinutesInUse % 60).toString();
		}
		else {
			device.average_daily_usage_hours_minutes = "";
		}
		
		if(absoluteDevice.systemManufacturer){
			device.make = absoluteDevice.systemManufacturer;
		}
		
		if(absoluteDevice.systemModel){
			device.model = absoluteDevice.systemModel;
		}
		
		
		if(absoluteDevice.hdcStatus && absoluteDevice.hdcStatus.calcStatus){
			device.hardware_status = absoluteDevice.hdcStatus.calcStatus;
		}
		if(absoluteDevice.hdcStatus && absoluteDevice.hdcStatus.lastDataReceived) {
			var lastHardwareUpdated = new GlideDateTime();
			lastHardwareUpdated.subtract(lastHardwareUpdated.getNumericValue()); //Sets date to 0.
			lastHardwareUpdated.add(absoluteDevice.hdcStatus.lastDataReceived);
			device.hardware_last_updated = lastHardwareUpdated;
		}
		
		if(absoluteDevice.sdcStatus && absoluteDevice.sdcStatus.calcStatus){
			device.software_status = absoluteDevice.sdcStatus.calcStatus;
		}
		if(absoluteDevice.sdcStatus && absoluteDevice.sdcStatus.lastDataReceived) {
			var lastSoftwareUpdated = new GlideDateTime();
			lastSoftwareUpdated.subtract(lastSoftwareUpdated.getNumericValue()); //Sets date to 0.
			lastSoftwareUpdated.add(absoluteDevice.sdcStatus.lastDataReceived);
			device.software_last_updated = lastSoftwareUpdated;
		}
		
		if(absoluteDevice.dlpStatus && absoluteDevice.dlpStatus.calcStatus){
			device.edd_status = absoluteDevice.dlpStatus.calcStatus;
		}
		if(absoluteDevice.dlpStatus && absoluteDevice.dlpStatus.lastDataReceived) {
			var lastEddUpdated = new GlideDateTime();
			lastEddUpdated.subtract(lastEddUpdated.getNumericValue()); //Sets date to 0.
			lastEddUpdated.add(absoluteDevice.dlpStatus.lastDataReceived);
			device.edd_last_updated = lastEddUpdated;
		}
		
		if(absoluteDevice.classification) {
			device.usage_classification = absoluteDevice.classification;
		}
		
		if(absoluteDevice.localIp) {
			device.local_ip = absoluteDevice.localIp;
		}
		
		if(absoluteDevice.publicIp) {
			device.public_ip = absoluteDevice.publicIp;
		}
		
		if(absoluteDevice.timeZone) {
			device.timezone = absoluteDevice.timeZone;
		}
		
		if(absoluteDevice.firstCallUtc) {
			var activationDate = new GlideDateTime();
			activationDate.subtract(activationDate.getNumericValue()); //Sets date to 0.
			activationDate.add(absoluteDevice.firstCallUtc);
			device.enrolled_date = activationDate;
		}
		
		//Adds up the memory size based on installed memory modules.  Fails back to detected RAM if modules not detected
		if(absoluteDevice.memories.length > 0){
			var totalRamBytesFromDimms = parseInt("0");
			for(var dimm=0; dimm<absoluteDevice.memories.length; dimm++){
				totalRamBytesFromDimms = totalRamBytesFromDimms + parseInt(absoluteDevice.memories[dimm].sizeBytes);
			}
			device.memory_total = formatBytes(totalRamBytesFromDimms,0);
		}
		else{
			if(absoluteDevice.totalPhysicalRamBytes) {
			device.memory_total = formatBytes(absoluteDevice.totalPhysicalRamBytes,2);
			}
		}
		
		if(absoluteDevice.availablePhysicalRamBytes) {
			device.memory_available = formatBytes(absoluteDevice.availablePhysicalRamBytes, 2);
		}
		
		if(absoluteDevice.volumes) {
			var space = 0;
			for(var i = 0; i < absoluteDevice.volumes.length; i++) {
				var volume = absoluteDevice.volumes[i];
				if(volume.freeSpaceBytes) {
					space += volume.freeSpaceBytes;					
				}
			}
			device.boot_drive_available_space = formatBytes(space, 2);
		}
		
		if(absoluteDevice.os) {
			if(absoluteDevice.os.version) {
				device.os_version = absoluteDevice.os.version;
			}
			if(absoluteDevice.os.build) {
				device.os_build = absoluteDevice.os.build;
			}
			if(absoluteDevice.os.releaseId) {
				device.os_release = absoluteDevice.os.releaseId;
			}
			if(absoluteDevice.os.ubr) {
				device.os_ubr = absoluteDevice.os.ubr;
			}
			if(absoluteDevice.os.editionId) {
				device.os_edition = absoluteDevice.os.editionId;
			}
			if(absoluteDevice.os.serialNumber) {
				device.os_serial_number = absoluteDevice.os.serialNumber;
			}
			if(absoluteDevice.os.architecture) {
				device.os_architecture = absoluteDevice.os.architecture;
			}
			if(absoluteDevice.os.csdVersion) {
				device.os_csd_version = absoluteDevice.os.csdVersion;
			}
			if(absoluteDevice.os.installDate) {
				var installDate = new GlideDateTime();
				installDate.subtract(installDate.getNumericValue());
				installDate.add(absoluteDevice.os.installDate);
				device.os_install_date = installDate;
			}
			if(absoluteDevice.os.lastBootTime) {
				var lastBootTime = new GlideDateTime();
				lastBootTime.subtract(lastBootTime.getNumericValue());
				lastBootTime.add(absoluteDevice.os.lastBootTime);
				device.os_last_boot_time = lastBootTime;
			}
			if(absoluteDevice.os.productKey) {
				device.os_product_key = absoluteDevice.os.productKey;
			}
		}
		
		if(absoluteDevice.cpu) {
			if(absoluteDevice.cpu.name) {
				device.cpu_name = absoluteDevice.cpu.name;
			}
			if(absoluteDevice.cpu.processorSpeed) {
				var processorSpeed = (absoluteDevice.cpu.processorSpeed / 1000).toFixed(2).toString() + " GHz";
				device.cpu_processor_speed = processorSpeed;
			}
			if(absoluteDevice.cpu.physicalCores) {
				device.cpu_physical_cores = absoluteDevice.cpu.physicalCores;
			}
			if(absoluteDevice.cpu.logicalCores) {
				device.cpu_logical_cores = absoluteDevice.cpu.logicalCores;
			}
		}
		
		if(absoluteDevice.bios) {
			if(absoluteDevice.bios.version) {
				device.bios_version = absoluteDevice.bios.version;
			}
			if(absoluteDevice.bios.versionDate) {
				device.bios_version_date = absoluteDevice.bios.versionDate;
			}
			if(absoluteDevice.bios.smBiosVersion) {
				device.bios_smbios_version = absoluteDevice.bios.smBiosVersion;
			}
			
			if(absoluteDevice.bios.releaseDate) {
				var releaseDate = new GlideDateTime();
				releaseDate.subtract(releaseDate.getNumericValue());
				releaseDate.add(absoluteDevice.bios.releaseDate);
				device.bios_release_date = releaseDate;
			}
		}
		
		if(absoluteDevice.policyGroupUid) {
			device.policy_group_uid = absoluteDevice.policyGroupUid;
		}
		
		if(absoluteDevice.policyGroupName) {
			device.policy_group_name = absoluteDevice.policyGroupName;
		}
		
		if(absoluteDevice.pageFileSpaceBytes) {
			device.pagefile_size = formatBytes(absoluteDevice.pageFileSpaceBytes, 2);
		}
		
		if(absoluteDevice.domain) {
			device.domain = absoluteDevice.domain;
		}
		
		if(absoluteDevice.avpInfo) {
			if(absoluteDevice.avpInfo.antivirusName) {
				device.antivirus_name = absoluteDevice.avpInfo.antivirusName;
			}
			
			if(absoluteDevice.avpInfo.antivirusVersion) {
				device.antivirus_version = absoluteDevice.avpInfo.antivirusVersion;
			}
			
			if(absoluteDevice.avpInfo.antivirusDefinition) {
				device.antivirus_definition = absoluteDevice.avpInfo.antivirusDefinition;
			}
			
			if(absoluteDevice.avpInfo.antivirusDefinitionDate) {
				var antivirusDefinitionDate = new GlideDateTime();
				antivirusDefinitionDate.subtract(antivirusDefinitionDate.getNumericValue());
				antivirusDefinitionDate.add(absoluteDevice.avpInfo.antivirusDefinitionDate);
				device.antivirus_definition_date = antivirusDefinitionDate;
			}
			
			if(absoluteDevice.avpInfo.antivirusDataReceivedUtc) {
				var antivirusDataReceivedUtc = new GlideDateTime();
				antivirusDataReceivedUtc.subtract(antivirusDataReceivedUtc.getNumericValue());
				antivirusDataReceivedUtc.add(absoluteDevice.avpInfo.antivirusDataReceivedUtc);
				device.antivirus_data_received_utc = antivirusDataReceivedUtc;
			}
		}
		
		if(absoluteDevice.espInfo) {
			if(absoluteDevice.espInfo.encryptionProductName) {
				device.encryption_name = absoluteDevice.espInfo.encryptionProductName;
			}
			
			if(absoluteDevice.espInfo.encryptionVersion) {
				device.encryption_version = absoluteDevice.espInfo.encryptionVersion;
			}
			
			if(absoluteDevice.espInfo.encryptionAlgorithm) {
				device.encryption_algorithm = absoluteDevice.espInfo.encryptionAlgorithm;
			}
			
			if(absoluteDevice.espInfo.encryptionStatusDescription) {
				device.encryption_status_description = absoluteDevice.espInfo.encryptionStatusDescription;
			}
			
			if(absoluteDevice.espInfo.encryptionKeySize) {
				device.encryption_key_size = absoluteDevice.espInfo.encryptionKeySize;
			}
			
			if(absoluteDevice.espInfo.hardwareEncryption) {
				device.encryption_hardware_encryption = absoluteDevice.espInfo.hardwareEncryption;
			}
			
			if(absoluteDevice.espInfo.lastEncryptionDataReceivedUtc) {
				var lastEncryptionDataReceivedUtc = new GlideDateTime();
				lastEncryptionDataReceivedUtc.subtract(lastEncryptionDataReceivedUtc.getNumericValue());
				lastEncryptionDataReceivedUtc.add(absoluteDevice.espInfo.lastEncryptionDataReceivedUtc);
				device.encryption_data_received_utc = lastEncryptionDataReceivedUtc;
			}
			
			if(absoluteDevice.espInfo.encryptionStatus) {
				device.encryption_status = absoluteDevice.espInfo.encryptionStatus;
			}
		}
		
		// Set raw data based on API response.
		device.device_data_raw = new global.JSON().encode(absoluteDevice);
		
		// Insert and redirect.
		device.insert();
		
		var upsertCdfs = new UpsertCdfs();
		upsertCdfs.update(device.id,device.sys_id);
		
		action.setRedirectURL(device);
		action.setReturnURL(current);
	}
	else {
		action.setRedirectURL(current);
	}
}]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>matt.wood</sys_created_by>
        <sys_created_on>2019-01-25 22:41:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>baa0dca0db1be740cb8fd77648961912</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>View Absolute Device</sys_name>
        <sys_overrides/>
        <sys_package display_value="Absolute ITSM Connector" source="x_absr_itsm">334c86f7dbc7a740cb8fd77648961963</sys_package>
        <sys_policy/>
        <sys_scope display_value="Absolute ITSM Connector">334c86f7dbc7a740cb8fd77648961963</sys_scope>
        <sys_update_name>sys_ui_action_baa0dca0db1be740cb8fd77648961912</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-10-28 23:03:17</sys_updated_on>
        <table>cmdb_ci_computer</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
